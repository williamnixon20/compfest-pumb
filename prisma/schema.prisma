generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String              @id @default(uuid())
  email       String              @unique
  username    String              @unique
  first_name  String
  last_name   String
  password    String
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  role        UserRole
  subscribers StudentsOnCourses[]
  teachers    TeachersOnCourses[]
  submission  Submission[]
  status      UserStatus?
}

model UserStatus {
  id          String @id @default(uuid())
  user_id     String @unique
  status      Status
  description String
  user        User   @relation(fields: [user_id], references: [id])
}

model Quiz {
  id          String      @id @default(uuid())
  title       String
  course_id   String
  course      Course      @relation(fields: [course_id], references: [id], onDelete: Cascade)
  questions   Question[]
  submission  Submission[]
}

model Question {
  id          String      @id @default(uuid())
  statement   String
  options     Option[]
  answer      Answer?
  attempts    OptionOnQuestion[]
  quiz_id     String
  quiz        Quiz        @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
}

model Option {
  id          String      @id @default(uuid())
  content     String
  answer      Answer?
  question_id String
  question    Question    @relation(fields: [question_id], references: [id], onDelete: Cascade)
  attempts    OptionOnQuestion[]
}

model Answer {
  question_id String      @id
  question    Question    @relation(fields: [question_id], references: [id], onDelete: Cascade)
  correct_id  String?     @unique
  option      Option?     @relation(fields: [correct_id], references: [id])
  feedback    String?
}

model OptionOnQuestion {
  id                String     @id @default(uuid())
  question_id       String
  question          Question   @relation(fields: [question_id], references: [id], onDelete: Cascade)
  option_id         String
  option            Option     @relation(fields: [option_id], references: [id], onDelete: Cascade)
  submission_id     String
  submission        Submission @relation(fields: [submission_id], references: [id], onDelete: Cascade)
}

model Course {
  id            String              @id @default(uuid())
  description   String
  thumbnail_url String
  title         String
  course_status CourseStatus?
  lectures      Lecture[]
  quizzes       Quiz[]
  followers     StudentsOnCourses[]
  teacher       TeachersOnCourses[]
  categories    Category[]
}

model CourseStatus {
  id          String @id @default(uuid())
  course_id   String @unique
  status      Status
  description String
  course      Course @relation(fields: [course_id], references: [id])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Lecture {
  id        String     @id @default(uuid())
  course_id String
  title     String
  course    Course     @relation(fields: [course_id], references: [id], onDelete: Cascade)
  resources Resource[]
}

model Resource {
  id         String       @id @default(uuid())
  name       String
  type       ResourceType
  url        String
  lecture_id String
  lecture    Lecture      @relation(fields: [lecture_id], references: [id], onDelete: Cascade)
}

model StudentsOnCourses {
  user_id    String
  course_id  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  progress   Int
  course     Course   @relation(fields: [course_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@id([course_id, user_id])
}

model TeachersOnCourses {
  user_id    String
  course_id  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  course     Course   @relation(fields: [course_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@id([course_id, user_id])
}

model Submission {
  id               String           @id @default(uuid())
  user_id          String
  user             User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  quiz_id          String
  quiz             Quiz             @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  score            Int
  answers          OptionOnQuestion[]
  
  @@unique([user_id, quiz_id])
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum Status {
  VERIFYING
  VERIFIED
  REJECTED
}

enum ResourceType {
  IMAGE
  VIDEO
  DOCUMENT
}
