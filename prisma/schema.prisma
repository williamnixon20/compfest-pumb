generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int                 @id @default(autoincrement())
  email       String   @unique
  username    String   @unique
  first_name  String
  last_name   String
  password    String
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  role        UserRole
  subscribers StudentsOnCourses[]
  teachers    TeachersOnCourses[]
  quizzes     UserOnQuiz[]
  status      UserStatus?
}

model UserStatus {
  id          Int    @id @default(autoincrement())
  user_id     Int    @unique
  verification_status        Status
  description String
  user        User   @relation(fields: [user_id], references: [id])
}

model Quiz {
  id        Int          @id @default(autoincrement())
  title     String
  course_id Int
  course    Course       @relation(fields: [course_id], references: [id])
  questions Question[]
  attempts  UserOnQuiz[]
}

model Question {
  id                Int              @id @default(autoincrement())
  statement         String
  feedback          String
  quiz_id           Int
  quiz              Quiz             @relation(fields: [quiz_id], references: [id])
  MultipleChoice    MultipleChoice?
  question_attempts QuestionAnswer[]
}

model QuestionAnswer {
  id           Int        @id @default(autoincrement())
  user_quiz_id Int
  question_id  Int
  answer       Int
  question     Question   @relation(fields: [question_id], references: [id])
  user_quiz    UserOnQuiz @relation(fields: [user_quiz_id], references: [id])
}

model Course {
  id            Int                 @id @default(autoincrement())
  description   String
  course_status CourseStatus?
  lectures      Lecture[]
  quizzes       Quiz[]
  followers     StudentsOnCourses[]
  teacher       TeachersOnCourses[]
  categories    Category[]
}

model CourseStatus {
  id          Int    @id @default(autoincrement())
  course_id   Int    @unique
  status      Status
  description String
  course      Course @relation(fields: [course_id], references: [id])
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[]
}

model Lecture {
  id           Int    @id @default(autoincrement())
  description  String
  resource_url String
  course_id    Int
  course       Course @relation(fields: [course_id], references: [id])
}

model StudentsOnCourses {
  user_id    Int
  course_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  progress   Int
  course     Course   @relation(fields: [course_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@id([course_id, user_id])
}

model TeachersOnCourses {
  user_id    Int
  course_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  course     Course   @relation(fields: [course_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@id([course_id, user_id])
}

model UserOnQuiz {
  id               Int              @id @default(autoincrement())
  user_id          Int
  quiz_id          Int
  score            Int
  quiz             Quiz             @relation(fields: [quiz_id], references: [id])
  user             User             @relation(fields: [user_id], references: [id])
  received_answers QuestionAnswer[]
}

model MultipleChoice {
  id          Int      @id @default(autoincrement())
  option_1    String
  option_2    String
  option_3    String
  Option_4    String
  feedback    String
  answer      String
  question_id Int      @unique
  Question    Question @relation(fields: [question_id], references: [id])
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum Status {
  ASSESSING
  VERIFYING
  REJECTED
}
