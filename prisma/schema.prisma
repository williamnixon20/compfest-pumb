generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int                 @id @default(autoincrement())
  email       String              @unique
  username    String              @unique
  first_name  String
  last_name   String
  password    String
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  role        UserRole
  subscribers StudentsOnCourses[]
  teachers    TeachersOnCourses[]
  quizzes     UserOnQuiz[]
  status      UserStatus?
}

model UserStatus {
  id          Int    @id @default(autoincrement())
  user_id     Int    @unique
  status      Status
  description String
  user        User   @relation(fields: [user_id], references: [id])
}

model Quiz {
  id        Int          @id @default(autoincrement())
  title     String
  course_id Int
  course    Course       @relation(fields: [course_id], references: [id])
  questions Question[]
  attempts  UserOnQuiz[]
}

model Question {
  id               Int                @id @default(autoincrement())
  statement        String
  quiz_id          Int
  quiz             Quiz               @relation(fields: [quiz_id], references: [id])
  Answer           Answer?
  Option           Option[]
  OptionOnQuestion OptionOnQuestion[]
}

model Course {
  id            Int                 @id @default(autoincrement())
  description   String
  thumbnail_url String
  title         String
  course_status CourseStatus?
  lectures      Lecture[]
  quizzes       Quiz[]
  followers     StudentsOnCourses[]
  teacher       TeachersOnCourses[]
  categories    Category[]
}

model CourseStatus {
  id          Int    @id @default(autoincrement())
  course_id   Int    @unique
  status      Status
  description String
  course      Course @relation(fields: [course_id], references: [id])
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[]
}

model Lecture {
  id        Int        @id @default(autoincrement())
  course_id Int
  title     String
  course    Course     @relation(fields: [course_id], references: [id])
  resources Resource[]
}

model Resource {
  id         Int          @id @default(autoincrement())
  type       ResourceType
  url        String
  lecture_id Int
  lecture    Lecture      @relation(fields: [lecture_id], references: [id])
}

model StudentsOnCourses {
  user_id    Int
  course_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  progress   Int
  course     Course   @relation(fields: [course_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@id([course_id, user_id])
}

model TeachersOnCourses {
  user_id    Int
  course_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  course     Course   @relation(fields: [course_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@id([course_id, user_id])
}

model UserOnQuiz {
  id               Int                @id @default(autoincrement())
  user_id          Int
  quiz_id          Int
  score            Int
  quiz             Quiz               @relation(fields: [quiz_id], references: [id])
  user             User               @relation(fields: [user_id], references: [id])
  OptionOnQuestion OptionOnQuestion[]
}

model Answer {
  question_id Int      @unique
  option_id   Int      @unique
  feedback    String
  Option      Option   @relation(fields: [option_id], references: [id])
  Question    Question @relation(fields: [question_id], references: [id])

  @@id([question_id, option_id])
}

model Option {
  id               Int                @id @default(autoincrement())
  content          String
  question_id      Int
  Question         Question           @relation(fields: [question_id], references: [id])
  Answer           Answer?
  OptionOnQuestion OptionOnQuestion[]
}

model OptionOnQuestion {
  id          Int          @id @default(autoincrement())
  question_id Int
  option_id   Int
  Option      Option       @relation(fields: [option_id], references: [id])
  Question    Question     @relation(fields: [question_id], references: [id])
  UserOnQuiz  UserOnQuiz[]
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum Status {
  VERIFYING
  VERIFIED
  REJECTED
}

enum ResourceType {
  IMAGE
  VIDEO
  DOCUMENT
}
